Avaliação Comparativa de Desempenho HTTP/3 vs HTTP/1.1
Este projeto realiza uma avaliação comparativa de desempenho entre os protocolos HTTP/3 e HTTP/1.1, utilizando servidores e clientes em Python, testes de carga com k6, e análise de resultados com pandas.
Requerimentos
Para executar o projeto, instale as dependências listadas abaixo. As instruções são voltadas para Windows, mas podem ser adaptadas para outros sistemas operacionais. O projeto foi testado no ambiente Windows com VS Code e PowerShell.
1. Python e Pacotes Python

Python: Versão 3.10.9 (recomendada devido a possíveis incompatibilidades do aioquic com Python 3.13.1).

Download: Python 3.10.9
Instalação:
Baixe o instalador para Windows.
Durante a instalação, marque "Add Python to PATH".
Verifique a instalação:python --version

Esperado: Python 3.10.9


Nota: Se você usa Python 3.13.1, pode tentar, mas mude para 3.10.9 se houver erros (ex.: ConnectionError).


Pacotes Python:

aioquic==0.9.25: Para HTTP/3 e QUIC (usado em server_http3.py e cliente_http3.py).
cryptography: Para manipulação de certificados.
pyOpenSSL: Suporte a SSL/TLS.
flask: Para o servidor HTTP/1.1 (server_http1.py).
requests: Para o cliente HTTP/1.1 (cliente_http1.py).
pandas: Para análise de resultados (analyze.py).
(Opcional) gunicorn: Para melhorar a taxa de sucesso do HTTP/1.1 no k6.


Instalação:

Crie um ambiente virtual (recomendado):python -m venv venv
.\venv\Scripts\Activate.ps1


Instale os pacotes:pip install aioquic==0.9.25 cryptography pyOpenSSL flask requests pandas


Opcional (para HTTP/1.1):pip install gunicorn





2. OpenSSL
O OpenSSL é necessário para gerar certificados (cert.pem, key.pem) usados pelo servidor HTTP/3.

Versão: Win64 OpenSSL v3.2.3 Light (ou mais recente).

Download: Win64 OpenSSL

Instalação:

Baixe o instalador Win64 OpenSSL v3.2.3 Light (~10MB).
Instale em C:\Program Files\OpenSSL-Win64.
Durante a instalação:
Escolha copiar as DLLs do OpenSSL para o diretório do sistema Windows.
Adicione o OpenSSL ao PATH.


Adicione ao PATH manualmente (se necessário):$env:Path += ";C:\Program Files\OpenSSL-Win64\bin"
setx PATH "$env:Path;C:\Program Files\OpenSSL-Win64\bin"


Feche e reabra o PowerShell.
Verifique:openssl version

Esperado: OpenSSL 3.2.3 10 Oct 2024 (ou similar).


Gerar Certificados:
cd C:\Faculdade\Redes\testeDesempenho
openssl req -x509 -newkey rsa:2048 -nodes -sha256 -keyout key.pem -out cert.pem -days 365 -subj "/CN=localhost"



3. k6
O k6 é usado para testes de carga (load-test.js) e comparação de desempenho entre HTTP/3 e HTTP/1.1.

Versão: v0.54.0 (ou mais recente).
Download: k6 Installation
Instalação:
Baixe o executável para Windows (64-bit) em k6 Downloads.
Mova k6.exe para C:\Program Files\k6\k6.exe.
Adicione ao PATH:$env:Path += ";C:\Program Files\k6"
setx PATH "$env:Path;C:\Program Files\k6"


Verifique:k6 version

Esperado: k6 v0.54.0 (ou similar).



4. Estrutura do Projeto
Certifique-se de que o diretório do projeto contém:
C:\Faculdade\Redes\testeDesempenho\
├── files\
│   ├── 1mb.bin
│   ├── 10mb.bin
│   ├── 100mb.bin
├── cert.pem
├── key.pem
├── server_http1.py
├── server_http3.py
├── cliente_http1.py
├── cliente_http3.py
├── load-test.js
├── analyze.py
├── results.json


Arquivos de Teste:Crie os arquivos 1mb.bin, 10mb.bin, e 100mb.bin se não existirem:
cd C:\Faculdade\Redes\testeDesempenho
mkdir files
fsutil file createnew files\1mb.bin 1048576
fsutil file createnew files\10mb.bin 10485760
fsutil file createnew files\100mb.bin 104857600


Certificados:Gere cert.pem e key.pem com o OpenSSL (veja acima).


Como Executar

Configurar o Ambiente:

Instale Python 3.10.9, pacotes Python, OpenSSL, e k6 conforme acima.
Crie os arquivos de teste e certificados.


Executar os Servidores:
python server_http1.py
python server_http3.py


Executar os Clientes:
python cliente_http1.py
python cliente_http3.py


Executar Testes de Carga:
& "C:\Program Files\k6\k6.exe" run load-test.js --out json=results.json --console-output


Analisar Resultados:
python analyze.py


Opcional (Melhorar HTTP/1.1):

Para aumentar a taxa de sucesso no k6 (atualmente 38% para HTTP/1.1):gunicorn --workers 4 server_http1:app





Notas de Depuração

Firewall: O HTTP/3 usa QUIC (UDP) na porta 4433. Libere-a:
netsh advfirewall firewall add rule name="Allow UDP 4433" dir=in action=allow protocol=UDP localport=4433


ConnectionError no HTTP/3:

Verifique os certificados:openssl x509 -in cert.pem -text -noout


Use Python 3.10.9 se houver problemas com aioquic no Python 3.13.1.
Adicione logs detalhados ao server_http3.py (nível DEBUG) para diagnosticar.


k6 com 0% de Sucesso no HTTP/3:

Confirme que o server_http3.py está rodando e acessível em localhost:4433:netstat -ano | findstr :4433





Se precisar de ajuda com erros, compartilhe os logs dos servidores e clientes.
